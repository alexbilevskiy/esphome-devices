esphome:
  name: ninebattery
  friendly_name: ninebattery
  platformio_options:
    board_build.flash_mode: dio
  includes:
    - "./esphome-custom/ninebattery/ninebattery.h"

esp32:
  board: seeed_xiao_esp32c3
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_BT_BLE_42_FEATURES_SUPPORTED: y

logger:
  baud_rate: 115200

api:
  password: ""
  reboot_timeout: 0s
ota:
  safe_mode: false
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  power_save_mode: none
  output_power: 8.5
  reboot_timeout: 0s

uart:
  - rx_pin:
      number: GPIO1
      mode: INPUT # !!! use external pullup !!! internal is not enough
    tx_pin:
      number: GPIO2
      mode: OUTPUT
    baud_rate: 115200
    id: ninebattery_uart

i2c:
  sda: GPIO3
  scl: GPIO4
  scan: true
  frequency: 400kHz

font:
  - file: "fonts/4x6.bdf"
    id: f4x6
    size: 6
  - file: "fonts/5x8.bdf"
    id: f5x8
  - file: "fonts/10x20.bdf"
    id: f10x20
  - file: "fonts/helvR08.bdf"
    id: fh08


display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    lambda: |-
      //it.print(0, 0, id(f4x6), "Hello World!");
      //it.print(0, 14, id(f5x8), "Hello World!");
      //it.print(0, 34, id(f10x20), "Hello World!");
      
      //it.printf(0, 0, id(f5x8), "%.0f", id(battery_status).state);
      it.printf(0, 0, id(f5x8), "%2.0f %d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d", id(battery_status).state, id(f_01).state, id(f_02).state, id(f_03).state, id(f_04).state, id(f_05).state, id(f_06).state, id(f_07).state, id(f_08).state, id(f_09).state, id(f_10).state, id(f_11).state, id(f_12).state, id(f_13).state, id(f_14).state, id(f_15).state, id(f_16).state );
      it.printf(0, 10, id(f5x8), "%.1f %%", id(battery_remainig_capacity_perc).state);
      it.printf(0, 20, id(f5x8), "%.2f A %.2f V", id(battery_current).state, id(battery_voltage).state);
      it.printf(0, 30, id(f5x8), "%.3f W", id(battery_power).state);
      it.printf(0, 40, id(f5x8), "%.0f + %.0f °C", id(battery_temp_0).state, id(battery_temp_1).state);



light:
  - platform: binary
    id: indicator_light
    name: "Indicator"
    output: indicator_output
    restore_mode: ALWAYS_ON

output:
  - id: indicator_output
    platform: gpio
    pin: GPIO8
    inverted: true



sensor:
  - platform: custom
    lambda: |-
      auto nb = new NinebatterySensor(id(ninebattery_uart), 1000);
      App.register_component(nb);
      return {nb->s_status, nb->s_remaining_capacity_perc, nb->s_remaining_capacity, nb->s_actual_capacity, nb->s_factory_capacity, nb->s_current, nb->s_voltage, nb->s_power, nb->s_temperature_zone_0, nb->s_temperature_zone_1, nb->s_voltage_cell_0, nb->s_voltage_cell_1, nb->s_voltage_cell_2, nb->s_voltage_cell_3, nb->s_voltage_cell_4, nb->s_voltage_cell_5, nb->s_voltage_cell_6, nb->s_voltage_cell_7, nb->s_voltage_cell_8, nb->s_voltage_cell_9 };
    sensors:
      - name: "Battery status"
        id: battery_status
        entity_category: "diagnostic"
        icon: "mdi:battery-unknown"
        accuracy_decimals: 0
      - name: "Remaining capacity (perc)"
        id: battery_remainig_capacity_perc
        device_class: "battery"
        unit_of_measurement: "%"
        accuracy_decimals: 0
      - name: "Remaining capacity"
        id: "remaining_capacity_perc"
        device_class: "energy"
        unit_of_measurement: "mAh"
        accuracy_decimals: 0
      - name: "Actual capacity"
        device_class: "energy"
        unit_of_measurement: "mAh"
        accuracy_decimals: 0
      - name: "Factory capacity"
        device_class: "energy"
        unit_of_measurement: "mAh"
        accuracy_decimals: 0
      - name: "Current"
        device_class: "current"
        id: battery_current
        unit_of_measurement: "A"
        accuracy_decimals: 3
      - name: "Voltage"
        id: battery_voltage
        device_class: "voltage"
        unit_of_measurement: "V"
        accuracy_decimals: 3
      - name: "Power"
        id: battery_power
        device_class: "power"
        unit_of_measurement: "W"
        accuracy_decimals: 3
      - name: "Temperature zone 0"
        id: battery_temp_0
        device_class: "temperature"
        unit_of_measurement: "°C"
        accuracy_decimals: 0
      - name: "Temperature zone 1"
        id: battery_temp_1
        device_class: "temperature"
        unit_of_measurement: "°C"
        accuracy_decimals: 0
      - name: "Cell 0 Voltage"
        device_class: "voltage"
        unit_of_measurement: "mV"
        accuracy_decimals: 0
      - name: "Cell 1 Voltage"
        device_class: "voltage"
        unit_of_measurement: "mV"
        accuracy_decimals: 0
      - name: "Cell 2 Voltage"
        device_class: "voltage"
        unit_of_measurement: "mV"
        accuracy_decimals: 0
      - name: "Cell 3 Voltage"
        device_class: "voltage"
        unit_of_measurement: "mV"
        accuracy_decimals: 0
      - name: "Cell 4 Voltage"
        device_class: "voltage"
        unit_of_measurement: "mV"
        accuracy_decimals: 0
      - name: "Cell 5 Voltage"
        device_class: "voltage"
        unit_of_measurement: "mV"
        accuracy_decimals: 0
      - name: "Cell 6 Voltage"
        device_class: "voltage"
        unit_of_measurement: "mV"
        accuracy_decimals: 0
      - name: "Cell 7 Voltage"
        device_class: "voltage"
        unit_of_measurement: "mV"
        accuracy_decimals: 0
      - name: "Cell 8 Voltage"
        device_class: "voltage"
        unit_of_measurement: "mV"
        accuracy_decimals: 0
      - name: "Cell 9 Voltage"
        device_class: "voltage"
        unit_of_measurement: "mV"
        accuracy_decimals: 0
  - platform: uptime
    name: Uptime

text_sensor:
  - platform: custom
    lambda: |-
      auto nbs = new NinebatterySerialSensor(1000);
      App.register_component(nbs);
      return {nbs->s_serial};
    text_sensors:
      - name: "Serial"
        icon: "mdi:identifier"
        entity_category: "diagnostic"

binary_sensor:
  - platform: custom
    lambda: |-
      auto nbst = new NinebatteryStatusSensor(1000);
      App.register_component(nbst);
      return {nbst->s_00,nbst->s_01,nbst->s_02,nbst->s_03,nbst->s_04,nbst->s_05,nbst->s_06,nbst->s_07,nbst->s_08,nbst->s_09,nbst->s_10,nbst->s_11,nbst->s_12,nbst->s_13,nbst->s_14,nbst->s_15};
    binary_sensors:
      - name: "flag: config valid"
        id: f_01
        entity_category: "diagnostic"
      - name: "flag: battery activated"
        id: f_02
        entity_category: "diagnostic"
      - name: "flag: battery charge protection"
        id: f_03
        entity_category: "diagnostic"
      - name: "flag: chraging enabled"
        id: f_04
        entity_category: "diagnostic"
      - name: "flag: register write lock"
        id: f_05
        entity_category: "diagnostic"
      - name: "flag: is discharging"
        id: f_06
        entity_category: "diagnostic"
      - name: "flag: is charging"
        id: f_07
        entity_category: "diagnostic"
      - name: "flag: is charger inserted"
        id: f_08
        entity_category: "diagnostic"
      - name: "flag: discharge error"
        id: f_09
        entity_category: "diagnostic"
      - name: "flag: overvoltage detected"
        id: f_10
        entity_category: "diagnostic"
      - name: "flag: overheat"
        id: f_11
        entity_category: "diagnostic"
      - name: "flag: n/a 1"
        id: f_12
        entity_category: "diagnostic"
      - name: "flag: n/a 2"
        id: f_13
        entity_category: "diagnostic"
      - name: "flag: charge error"
        id: f_14
        entity_category: "diagnostic"
      - name: "flag: deep UV error"
        id: f_15
        entity_category: "diagnostic"
      - name: "flag: n/a 3"
        id: f_16
        entity_category: "diagnostic"
