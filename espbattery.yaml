esphome:
  name: espbattery
  friendly_name: espbattery
  platformio_options:
    board_build.flash_mode: dio
  on_boot:
    priority: 500
    then:
      - switch.turn_on: display_power

esp32:
  board: seeed_xiao_esp32c3
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_BT_BLE_42_FEATURES_SUPPORTED: y
      CONFIG_BT_CTRL_MODEM_SLEEP: y # low power mode

preferences:
  flash_write_interval: 180s

globals:
  - id: current_capacity
    type: float
    restore_value: true
    initial_value: "0.0"
  - id: actual_capacity
    type: float
    restore_value: true
    initial_value: "60.0"


logger:
  baud_rate: 0

api:
  password: ""
  reboot_timeout: 0s
ota:
  platform: esphome
  password: ""
safe_mode:
  disabled: true

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  power_save_mode: none
  output_power: 15dBm
  reboot_timeout: 0s

i2c:
  sda: GPIO3
  scl: GPIO4
  scan: true
  frequency: 400kHz

font:
  - file: "fonts/4x6.bdf"
    id: f4x6
    size: 6
  - file: "fonts/5x8.bdf"
    id: f5x8
  - file: "fonts/10x20.bdf"
    id: f10x20
  - file: "fonts/helvR08.bdf"
    id: fh08


display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    update_interval: 100ms
    lambda: |-
      //it.print(0, 0, id(f4x6), "Hello World!");
      //it.print(0, 14, id(f5x8), "Hello World!");
      //it.print(0, 34, id(f10x20), "Hello World!");
      
      if(id(display_power).state == false) {
          return;              
      }      
      it.printf(128, 0, id(f10x20), TextAlign::TOP_RIGHT, "%.2fW", id(ina226_power).state);
      it.printf(128, 15, id(f10x20), TextAlign::TOP_RIGHT, "%.2fA", id(ina226_current).state);
      it.printf(128, 30, id(f10x20), TextAlign::TOP_RIGHT, "%.2fV", id(ina226_bus_voltage).state);
      it.printf(128, 45, id(f10x20), TextAlign::TOP_RIGHT, "%.1fAh", id(current_capacity));
      it.printf(0, 45, id(f10x20), TextAlign::TOP_LEFT, "%.1f%%", id(capacity).state);

light:
  - platform: binary
    id: indicator_light
    name: "Indicator"
    output: indicator_output
    restore_mode: ALWAYS_ON

output:
  - id: indicator_output
    platform: gpio
    pin:
      number: GPIO8
      ignore_strapping_warning: true
    inverted: true

sensor:
  - platform: ina226
    address: 0x40
    shunt_resistance: 0.002 ohm
    max_current: 10 A
    update_interval: 5s

    current:
      name: "INA226 Current (int)"
      id: ina226_current
      internal: true
      on_value:
        - lambda: |-
            id(current_capacity) -= x * (5.0 / 3600.0);  // 5s â†’ Ah
    bus_voltage:
      name: "INA226 Bus Voltage (int)"
      id: ina226_bus_voltage
      internal: true
    power:
      name: "INA226 Power (int)"
      id: ina226_power
      internal: true

  - platform: template
    name: "INA226 Current"
    device_class: "current"
    unit_of_measurement: "A"
    accuracy_decimals: 2
    update_interval: 5s
    lambda: !lambda 'return id(ina226_current).state;'
    filters:
      - sliding_window_moving_average:
          window_size: 12
          send_every: 12
  - platform: template
    name: "INA226 Bus Voltage"
    device_class: "voltage"
    unit_of_measurement: "V"
    accuracy_decimals: 2
    update_interval: 5s
    lambda: !lambda 'return id(ina226_bus_voltage).state;'
    filters:
      - sliding_window_moving_average:
          window_size: 12
          send_every: 12
  - platform: template
    name: "INA226 Power"
    device_class: "Power"
    unit_of_measurement: "W"
    accuracy_decimals: 2
    update_interval: 5s
    lambda: !lambda 'return id(ina226_power).state;'
    filters:
      - sliding_window_moving_average:
          window_size: 12
          send_every: 12

  - platform: template
    name: "Current capacity"
    device_class: "energy"
    unit_of_measurement: "Ah"
    accuracy_decimals: 5
    update_interval: 60s
    lambda: |-
      return id(current_capacity);

  - platform: template
    name: "Actual capacity"
    device_class: "energy"
    unit_of_measurement: "Ah"
    accuracy_decimals: 5
    update_interval: 120s
    lambda: |-
      return id(actual_capacity);

  - platform: template
    name: "Capacity"
    id: capacity
    device_class: "battery"
    unit_of_measurement: "%"
    accuracy_decimals: 2
    update_interval: 60s
    lambda: |-
      return id(current_capacity) / id(actual_capacity) * 100;

  - platform: uptime
    name: Uptime


binary_sensor:

switch:
  - platform: template
    optimistic: true
    id: display_power
    name: "display power"
    icon: "mdi:monitor"
    on_turn_on:
      - delay: 1h
      - switch.turn_off: display_power

number:
  - platform: template
    name: "Set current capacity"
    id: current_capacity_input
    device_class: "energy"
    unit_of_measurement: "Ah"
    entity_category: "config"
    min_value: 0
    max_value: 100
    mode: box
    step: 0.0001
    restore_value: false
    set_action:
      then:
        - lambda: |-
            id(current_capacity) = x;

  - platform: template
    name: "Set actual capacity"
    id: actual_capacity_input
    device_class: "energy"
    unit_of_measurement: "Ah"
    entity_category: "config"
    min_value: 0
    max_value: 100
    mode: box
    step: 0.0001
    restore_value: false
    set_action:
      then:
        - lambda: |-
            id(actual_capacity) = x;
