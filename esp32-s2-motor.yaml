# HW30A or similar RC motor controller
# https://www.sarkanyellato.hu/wp-content/uploads/2011/10/RC-Timer-10.18.30.40A-ESC-Instruction.pdf
# https://www.dys.hk/upload/2017-05-03/speed%20control%20HW25A30A.pdf
esphome:
  name: esp32-s2-motor
  friendly_name: esp32-s2-motor

esp32:
  board: lolin_s2_mini
  variant: esp32s2
  framework:
    type: esp-idf

logger:
  baud_rate: 115200

api:
  password: ""
  reboot_timeout: 0s
ota:
  platform: esphome
  password: ""
safe_mode:
  disabled: true

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  reboot_timeout: 0s

button:
  - platform: restart
    name: "Reboot"

    # pwm frequency is 50 Hz or 20ms per pulse
    # throttle control is based on pulse width: 1ms - reverse, 1.5ms - idle, 2ms - full speed
    # working range therefore is: 1.5-2ms
    # 0%: 1.5ms
    # 50%: 1.75ms
    # 100%: 2ms
    # formula:
    # calc period by desired speed (in percent) = 1.5ms+(2ms-1.5ms)/100*x_perc
    # convert period to ledc level: range/20ms = level

  - platform: template
    name: "motor off"
    on_press:
      lambda: |-
        id(motor_output).turn_off();
  - platform: template
    name: "motor idle"
    on_press:
      lambda: |-
        id(motor_output).set_level(0.075); // 1.5ms / 20ms
  - platform: template
    name: "motor full"
    on_press:
      lambda: |-
        id(motor_output).set_level(0.1); // 2ms / 20ms
  - platform: template
    name: "motor 50%"
    on_press:
      lambda: |-
        id(motor_output).set_level(1.75/20);
  - platform: template
    name: "motor 20%"
    on_press:
      lambda: |-
        id(motor_output).set_level((1.5+(2-1.5)/100*20)/20);
  - platform: template
    name: "motor 30%"
    on_press:
      lambda: |-
        id(motor_output).set_level((1.5+(2-1.5)/100*30)/20);
  - platform: template
    name: "motor 10%"
    on_press:
      lambda: |-
        id(motor_output).set_level((1.5+(2-1.5)/100*10)/20);
  - platform: template
    name: "motor reverse"
    on_press:
      lambda: |-
        id(motor_output).set_level(0.05);

sensor:
  - platform: uptime
    name: Uptime
  - platform: wifi_signal
    name: "WiFi Signal Sensor"

light:
  - platform: binary
    id: indicator_light
    name: "Indicator"
    output: indicator_output
    restore_mode: ALWAYS_ON
    internal: true

output:
  - id: indicator_output
    platform: gpio
    pin: GPIO15
    inverted: false

  - platform: ledc
    frequency: 50 Hz
    id: motor_output
    pin: GPIO16
    inverted: false
