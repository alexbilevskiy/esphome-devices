esphome:
  name: watermeter-02
  friendly_name: watermeter-02
  platformio_options:
    board_build.flash_mode: dio
  on_boot:
    priority: 500
    then:
      - pulse_meter.set_total_pulses:
          id: meter_01
          value: !lambda "return id(meter_01_store) / 1 * 400;"
      - pulse_meter.set_total_pulses:
          id: meter_02
          value: !lambda "return id(meter_02_store) / 1 * 400;"
  on_shutdown:
    then:
      - globals.set:
          id: meter_01_store
          value: !lambda 'return id(meter_01_total).state;'
      - globals.set:
          id: meter_02_store
          value: !lambda 'return id(meter_02_total).state;'

esp32:
  board: seeed_xiao_esp32c3
  framework:
    type: esp-idf
    version: recommended

preferences:
  flash_write_interval: 15s

udp:
  update_interval: 1s
  sensors:
    - id: meter_01
      broadcast_id: cold_water_flow
    - id: meter_01_total
      broadcast_id: cold_water_usage
    - id: meter_01_current
      broadcast_id: cold_water_current_run
    - id: meter_02
      broadcast_id: hot_water_flow
    - id: meter_02_total
      broadcast_id: hot_water_usage
    - id: meter_02_current
      broadcast_id: hot_water_current_run

globals:
  - id: meter_01_store
    type: float
    restore_value: true
  - id: meter_01_total_prev
    type: float
    restore_value: no
  - id: meter_01_reset
    type: bool
    restore_value: no

  - id: meter_02_store
    type: float
    restore_value: true
  - id: meter_02_total_prev
    type: float
    restore_value: no
  - id: meter_02_reset
    type: bool
    restore_value: no

logger:
  baud_rate: 0

api:
  password: ""
ota:
  platform: esphome
  password: ""
safe_mode:
  disabled: true

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  output_power: 15dbm


button:
  - platform: restart
    name: "Reboot"

  - platform: template
    name: "Reset volume"
    entity_category: "config"
    on_press:
      - pulse_meter.set_total_pulses:
          id: meter_01
          value: 0.0
      - globals.set:
          id: meter_01_store
          value: '0.0'
      - pulse_meter.set_total_pulses:
          id: meter_02
          value: 0.0
      - globals.set:
          id: meter_02_store
          value: '0.0'
sensor:
  - platform: uptime
    name: Uptime
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    #update_interval: 2s

  - platform: pulse_meter
    pin:
      number: GPIO1
      mode:
        input: true
        pullup: false
        pulldown: false
      inverted: true
    id: meter_01
    name: "cold water flow"
    device_class: volume_flow_rate
    #update_interval: 1s
    timeout: 2s
    internal_filter_mode: PULSE
    internal_filter: 0.002s
    unit_of_measurement: "L/min"
    filters:
      - lambda: return (x * 1 / 400);
    total:
      name: "cold water usage"
      device_class: water
      id: meter_01_total
      icon: "mdi:water"
      accuracy_decimals: 2
      unit_of_measurement: "L"
      filters:
        - lambda: return (x * 1 / 400);
        - sliding_window_moving_average:
            window_size: 25
            send_every: 1
            send_first_at: 1
      on_value:
        - lambda: |-
            if(x > 0) {
              id(meter_01_store) = x;
            }
            if(id(meter_01_reset) == true) {
              id(meter_01_current).publish_state(0.0);
              id(meter_01_total_prev) = x;
              id(meter_01_reset) = false;
              return;
            }
            id(meter_01_current).publish_state(x - id(meter_01_total_prev));

    on_raw_value:
      - light.toggle:
          id: indicator_light
    on_value:
      - lambda: |- 
          if (x == 0) {
            id(meter_01_reset) = true;
            return;
          }

  - platform: pulse_meter
    pin:
      number: GPIO2
      mode:
        input: true
        pullup: false
        pulldown: false
      inverted: true
    id: meter_02
    name: "hot water flow"
    device_class: volume_flow_rate
    #update_interval: 1s
    timeout: 2s
    internal_filter_mode: PULSE
    internal_filter: 0.002s
    unit_of_measurement: "L/min"
    filters:
      - lambda: return (x * 1 / 400);
    total:
      name: "hot water usage"
      device_class: water
      id: meter_02_total
      icon: "mdi:water"
      accuracy_decimals: 2
      unit_of_measurement: "L"
      filters:
        - lambda: return (x * 1 / 400);
        - sliding_window_moving_average:
            window_size: 25
            send_every: 1
            send_first_at: 1
      on_value:
        - lambda: |-
            if(x > 0) {
              id(meter_02_store) = x;
            }
            if(id(meter_02_reset) == true) {
              id(meter_02_current).publish_state(0.0);
              id(meter_02_total_prev) = x;
              id(meter_02_reset) = false;
              return;
            }
            id(meter_02_current).publish_state(x - id(meter_02_total_prev));
      on_raw_value:
      - light.toggle:
          id: indicator_light
    on_value:
      - lambda: |-
          if (x == 0) {
            id(meter_02_reset) = true;
            return;
          }


  - platform: template
    id: meter_01_current
    icon: "mdi:water"
    accuracy_decimals: 2
    unit_of_measurement: "L"
    name: "cold water current run"
    update_interval: 1s
    lambda: return {};

  - platform: template
    id: meter_02_current
    icon: "mdi:water"
    accuracy_decimals: 2
    unit_of_measurement: "L"
    name: "hot water current run"
    update_interval: 1s
    lambda: return {};

light:
  - platform: binary
    id: indicator_light
    name: "Indicator"
    output: indicator_output
    restore_mode: ALWAYS_ON
    internal: true

output:
  - id: indicator_output
    platform: gpio
    pin:
      number: GPIO8
      ignore_strapping_warning: true
    inverted: true