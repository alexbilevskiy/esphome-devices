# custom fan controller based on yyac-3s
esphome:
  name: fan-custom

esp32:
  board: lolin_s2_mini
  variant: esp32s2
  framework:
    type: esp-idf
    version: recommended

logger:

api:
  password: ""
ota:
  platform: esphome
  password: ""
safe_mode:
  disabled: true

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

preferences:
  flash_write_interval: 15s

light:
  - platform: binary
    name: "Indicator"
    id: indicator_light
    output: indicator_output
    restore_mode: ALWAYS_ON
#
#  - platform: monochromatic
#    output: pwm_output
#    name: "pwm control"
#    default_transition_length: 0ms

output:
  - id: indicator_output
    platform: gpio
    pin: GPIO15
    inverted: false

  - platform: ledc
    pin: GPIO16
    frequency: 50 Hz
    id: pwm_output

fan:
  - platform: template
    name: "fan"
    id: t_fan
    speed_count: 100
    restore_mode: RESTORE_DEFAULT_OFF
    preset_modes:
      - "off"
      - "20%"
      - "25%"
      - "30%"
      - "100%"
    on_state:
      - if:
          condition:
            - lambda: 'return (id(t_fan).speed == 0) || id(t_fan).state == false;'
          then:
            - output.turn_off:
                id: pwm_output
          else:
            - lambda: |-
                id(pwm_output).turn_on();
                id(pwm_output).set_level(float(x->speed)/100.0);
    on_preset_set:
      - if:
          condition:
            - lambda: 'return (id(t_fan).preset_mode == "off");'
          then:
            - fan.turn_off:
                id: t_fan
      - if:
          condition:
            - lambda: 'return (id(t_fan).preset_mode == "20%");'
          then:
            - fan.turn_on:
                id: t_fan
                speed: 20
      - if:
          condition:
            - lambda: 'return (id(t_fan).preset_mode == "25%");'
          then:
            - fan.turn_on:
                id: t_fan
                speed: 25
      - if:
          condition:
            - lambda: 'return (id(t_fan).preset_mode == "30%");'
          then:
            - fan.turn_on:
                id: t_fan
                speed: 30
      - if:
          condition:
            - lambda: 'return (id(t_fan).preset_mode == "100%");'
          then:
            - fan.turn_on:
                id: t_fan
                speed: 100



sensor:
  - platform: internal_temperature
    name: "Internal Temperature"
  - platform: uptime
    name: Uptime