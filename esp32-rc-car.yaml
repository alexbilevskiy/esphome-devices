esphome:
  name: esp32-rc-car
  friendly_name: esp32-rc-car

esp32:
  board: wemos_d1_mini32
  framework:
    type: esp-idf
    version: recommended

external_components:
#  - source: github://fsievers22/esphome-ble-remote@master
#    components: [ ble_client_hid ]
  - source:
      type: local
      path: esphome-ble-remote/components
    components: [ ble_client_hid ]

logger:
  baud_rate: 0

api:
  password: ""
ota:
  safe_mode: false
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

esp32_ble_tracker:

ble_client:
  - id: ble_client_1
    mac_address: "F0:5E:CD:51:9B:66"

ble_client_hid:
  - id: ble_client_hid_1
    ble_client_id: ble_client_1

output:
  - platform: ledc
    pin: GPIO16
    id: gpio_pwm_main
    frequency: 1000 Hz
  - platform: ledc
    pin: TXD
    id: gpio_pwm_turn
    frequency: 1000 Hz

  - id: indicator_output
    platform: gpio
    pin: GPIO2
    inverted: false

light:
  - platform: binary
    id: indicator_light
    name: "Indicator"
    output: indicator_output
    restore_mode: ALWAYS_ON

switch:
  - platform: gpio
    pin: GPIO21
    name: "Move backward"
    restore_mode: ALWAYS_OFF
    id: sw_bw
    interlock: [sw_fw]
  - platform: gpio
    pin: GPIO17
    name: "Move forward"
    restore_mode: ALWAYS_OFF
    id: sw_fw
    interlock: [sw_bw]

  - platform: gpio
    pin: GPIO22
    name: "Turn left"
    restore_mode: ALWAYS_OFF
    id: sw_left
    interlock: [sw_right]
  - platform: gpio
    pin: RXD
    name: "Turn right"
    restore_mode: ALWAYS_OFF
    id: sw_right
    interlock: [sw_left]

servo:
  - id: servo_main
    output: gpio_pwm_main
    min_level: 0%
    idle_level: 40%
    max_level: 100%
  - id: servo_turn
    output: gpio_pwm_turn
    min_level: 0%
    idle_level: 100%
    max_level: 100%

number:
  - platform: template
    name: Speed main
    id: speed_main
    min_value: 0
    initial_value: 100
    max_value: 100
    step: 1
    optimistic: true
    mode: box
    set_action:
      then:
        - servo.write:
            id: servo_main
            level: !lambda 'return x / 100.0;'
  - platform: template
    name: Speed turn
    id: speed_turn
    min_value: 0
    initial_value: 100
    max_value: 100
    step: 1
    optimistic: true
    mode: box
    set_action:
      then:
        - servo.write:
            id: servo_turn
            level: !lambda 'return x / 100.0;'


sensor:
  - platform: ble_client_hid
    ble_client_hid_id: ble_client_hid_1
    type: battery
    name: "Battery"

  - platform: ble_client_hid
    id: is_pressed
    type: last_event_value
    name: "Last Event Value"

text_sensor:
  - platform: ble_client_hid
    name: "Last Event Usage"

    #NOTE id(is_pressed).state == 0 IS INVERTED

    on_value:
      then:
        - if:
            condition:
              and:
                - lambda: 'return x == "Mute";'
                - lambda: 'return id(is_pressed).state == 0;'
            then:
              - logger.log: "CENTER"
              - light.turn_on: indicator_light
              - delay: 30ms
              - light.turn_off: indicator_light
              - switch.turn_off: sw_left
              - switch.turn_off: sw_right
              - switch.turn_off: sw_fw
              - switch.turn_off: sw_bw
        - if:
            condition:
              and:
                - lambda: 'return x == "AC Back";'
                - lambda: 'return id(is_pressed).state == 0;'
            then:
              - logger.log: "Increase speed"
              - light.turn_on: indicator_light
              - delay: 30ms
              - light.turn_off: indicator_light
              - number.set:
                  id: speed_main
                  value: !lambda 'return id(speed_main).state + 5;'
        - if:
            condition:
              and:
                - lambda: 'return x == "Camera Access Toggle";'
                - lambda: 'return id(is_pressed).state == 0;'
            then:
              - logger.log: "Decrease speed"
              - light.turn_on: indicator_light
              - delay: 30ms
              - light.turn_off: indicator_light
              - number.set:
                  id: speed_main
                  value: !lambda 'return id(speed_main).state - 5;'
        - if:
            condition:
              and:
                - lambda: 'return x == "Menu Pick";'
                - lambda: 'return id(is_pressed).state == 0;'
            then:
              - logger.log: "Rotate right"
              - light.turn_on: indicator_light
              - delay: 30ms
              - light.turn_off: indicator_light
              - switch.toggle: sw_right
        - if:
            condition:
              and:
                - lambda: 'return x == "Menu Right";'
                - lambda: 'return id(is_pressed).state == 0;'
            then:
              - logger.log: "Rotate left"
              - light.turn_on: indicator_light
              - delay: 30ms
              - light.turn_off: indicator_light
              - switch.toggle: sw_left
        - if:
            condition:
              and:
                - lambda: 'return x == "Menu Down";'
                - lambda: 'return id(is_pressed).state == 0;'
            then:
              - logger.log: "Move forward"
              - light.turn_on: indicator_light
              - delay: 30ms
              - light.turn_off: indicator_light
              - switch.toggle: sw_fw
        - if:
            condition:
              and:
                - lambda: 'return x == "Menu Left";'
                - lambda: 'return id(is_pressed).state == 0;'
            then:
              - logger.log: "Move backward"
              - light.turn_on: indicator_light
              - delay: 30ms
              - light.turn_off: indicator_light
              - switch.toggle: sw_bw
            else:
              - if:
                  condition:
                    lambda: 'return id(is_pressed).state == 0;'
                  then:
                  #do nothing; key either is alredy processed or ignored
                  else:
                  #do nothing; key is released
