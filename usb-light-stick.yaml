esphome:
  name: usb-light-stick
  friendly_name: usb-light-stick
  platformio_options:
    board_build.flash_mode: dio

esp32:
  board: seeed_xiao_esp32c3
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_BT_BLE_42_FEATURES_SUPPORTED: y

logger:
  baud_rate: 0

api:
  password: ""
  reboot_timeout: 0s
ota:
  platform: esphome
  password: ""
safe_mode:
  disabled: true

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  reboot_timeout: 0s
  output_power: 20.5dBm

button:
  - platform: restart
    name: "Reboot"
sensor:
  - platform: uptime
    name: Uptime
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 15s

light:
  - platform: binary
    id: indicator_light
    name: "Indicator"
    output: indicator_output
    restore_mode: ALWAYS_ON
#
#  - platform: monochromatic
#    name: "LED 1"
#    output: led_1
#    id: light_1
#  - platform: monochromatic
#    name: "LED 2"
#    output: led_2
#    id: light_2

  - platform: cwww
    id: stick
    name: "stick"
    cold_white: pwm_2
    warm_white: pwm_1
    cold_white_color_temperature: 6000 K
    warm_white_color_temperature: 3000 K
    constant_brightness: false
    restore_mode: RESTORE_DEFAULT_ON

output:
  - id: indicator_output
    platform: gpio
    pin:
      number: GPIO8
      ignore_strapping_warning: true
    inverted: true

  - id: pwm_1
    channel: 2
    frequency: 1220 Hz
    platform: ledc
    pin: GPIO3

  - id: pwm_2
    channel: 4
    frequency: 1220 Hz
    platform: ledc
    pin: GPIO1

# buttons 1 2
matrix_keypad:
  rows:
    - pin:
        number: GPIO7
        mode:
          output: true
        inverted: false
    # DUMMY; if not defined, binary_sensor below does not work
    - pin:
        number: GPIO6
        mode:
          output: true
        inverted: false
  columns:
    - pin:
        number: GPIO10
        allow_other_uses: true
        mode:
          input: true
          pullup: true
    - pin:
        number: GPIO20
        allow_other_uses: true
        mode:
          input: true
          pullup: true

binary_sensor:
  - platform: matrix_keypad
    internal: true
    id: key1
    name: power
    row: 0
    col: 0
    on_click:
      - if:
          condition:
            - lambda: 'return id(stick).current_values.is_on();'
          then:
            - select.set:
                id: sel_mode
                option: "off"
      - if:
          condition:
            - lambda: 'return !(id(stick).current_values.is_on());'
          then:
            - select.set:
                id: sel_mode
                option: "neutral"

  - platform: matrix_keypad
    internal: true
    id: key2
    name: mode
    row: 0
    col: 1
    on_click:
      - select.next: sel_mode

  # buttons 3 4
  - platform: gpio
    internal: true
    pin:
      inverted: true
      number: GPIO10
      allow_other_uses: true
      mode:
        input: true
        pullup: true
    name: brightness down
    id: key3
    on_click:
      light.dim_relative:
        id: stick
        relative_brightness: -15%
  - platform: gpio
    internal: true
    pin:
      inverted: true
      number: GPIO20
      allow_other_uses: true
      mode:
        input: true
        pullup: true
    name: brightness up
    id: key4
    on_click:
      light.dim_relative:
        id: stick
        relative_brightness: 15%

select:
  - platform: template
    name: Mode
    id: sel_mode
    options:
      - "off"
      - "neutral"
      - "cold"
      - "warm"
    initial_option: "neutral"
    optimistic: true
    on_value:
      then:
        - if:
            condition:
              - lambda: 'return id(sel_mode).state == "off";'
            then:
              - light.turn_off: stick
        - if:
            condition:
              - lambda: 'return id(sel_mode).state == "cold";'
            then:
              - light.turn_on:
                  id: stick
                  cold_white: 100%
                  warm_white: 0%
                  brightness: 100%
        - if:
            condition:
              - lambda: 'return id(sel_mode).state == "warm";'
            then:
              - light.turn_on:
                  id: stick
                  cold_white: 0%
                  warm_white: 100%
                  brightness: 100%
        - if:
            condition:
              - lambda: 'return id(sel_mode).state == "neutral";'
            then:
              - light.turn_on:
                  id: stick
                  cold_white: 100%
                  warm_white: 100%
                  brightness: 100%
